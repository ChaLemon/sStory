// Generated by CoffeeScript 1.6.2
var sStory, sStoryEditor;

sStory = (function() {
  function sStory(story_list) {
    this.story_list = story_list;
    if (this.story_list === void 0) {
      throw "No story_list defined";
    }
  }

  sStory.prototype.render = function() {
    var $content, templates;

    console.log("re-render");
    $content = $('#content');
    $content.html("");
    templates = {};
    $(".section-template").each(function() {
      var templateSource;

      templateSource = $(this).html();
      return templates[$(this).attr('id')] = Handlebars.compile(templateSource);
    });
    _.each(this.story_list, function(section, i) {
      var sectionContent, sectionHtml;

      sectionHtml = templates["section-template-" + section.type](section);
      sectionContent = $("<div id='" + i + "' class='" + section.type + "'></div>").html(sectionHtml);
      return $content.append(sectionContent);
    });
    return this.story_list;
  };

  sStory.prototype.story_list = function() {
    return this.story_list;
  };

  return sStory;

})();

sStoryEditor = (function() {
  function sStoryEditor(story) {
    this.story = story;
    this.sectionTypes = {
      photo: {
        photoBigText: {
          inputs: ['title', 'photoUrl'],
          mustHave: ['photoUrl']
        },
        photoCaption: {
          inputs: ['title', 'photoUrl', 'caption'],
          mustHave: ['photoUrl', 'caption']
        }
      },
      video: {
        videoYoutube: {
          inputs: ['embedCode', 'caption'],
          mustHave: ['embedCode']
        },
        videoVimeo: {
          inputs: ['embedCode', 'caption'],
          mustHave: ['embedCode']
        }
      },
      sound: {
        soundSoundcloud: {
          inputs: ['title', 'embedCode'],
          mustHave: ['embedCode']
        }
      },
      location: {
        locationSinglePlace: {
          inputs: ['address', 'caption', 'photoUrl'],
          mustHave: ['address', 'caption']
        }
      }
    };
    this.renderSectionList();
    this.renderSectionTypeSelector();
  }

  sStoryEditor.prototype.renderSectionSubTypeSelector = function(section) {
    var $select, subsections, that;

    if (section === void 0) {
      section = "photo";
    }
    subsections = this.sectionTypes[section];
    $select = $("#sub-section-type");
    $select.html("");
    _.each(_.keys(subsections), function(sectionType) {
      var $option;

      $option = $('<option value="' + sectionType + '">' + sectionType + '</option>');
      return $select.append($option);
    });
    that = this;
    return $select.on("change", function() {
      return that.renderSectionEditor();
    });
  };

  sStoryEditor.prototype.renderSectionTypeSelector = function() {
    var $select, that;

    $select = $("#new-section-type");
    $select.html("");
    _.each(_.keys(this.sectionTypes), function(sectionType) {
      var $option;

      $option = $('<option value="' + sectionType + '">' + sectionType + '</option>');
      return $select.append($option);
    });
    that = this;
    $select.on("change", function() {
      that.renderSectionSubTypeSelector($(this).val());
      return that.renderSectionEditor();
    });
    this.renderSectionSubTypeSelector();
    return this.renderSectionEditor();
  };

  sStoryEditor.prototype.renderSectionEditor = function() {
    var $editor, newSectionSubType, newSectionType, templates, that;

    templates = {};
    $(".editor-template").each(function() {
      var templateSource;

      templateSource = $(this).html();
      return templates[$(this).attr('id')] = Handlebars.compile(templateSource);
    });
    newSectionType = $("#new-section-type").val();
    newSectionSubType = $("#sub-section-type").val();
    $editor = $("#editor-inputs");
    $editor.html("");
    that = this;
    return _.each(this.sectionTypes[newSectionType][newSectionSubType].inputs, function(input) {
      var $template, mustHave, sectionData;

      sectionData = that.sectionTypes[newSectionType][newSectionSubType];
      mustHave = $.inArray(input, sectionData.mustHave) > -1;
      $template = $(templates['editor-template-' + input]());
      if (mustHave) {
        $template.addClass("must-have");
      }
      return $editor.append($template);
    });
  };

  sStoryEditor.prototype.renderSectionList = function() {
    var $content, $sortable, that;

    $content = $('#section-list');
    $content.html("");
    that = this;
    _.each(this.story.story_list, function(section, i) {
      var deleteIcon, sectionContent, sectionIcon, sectionMainType;

      sectionIcon = "";
      sectionMainType = "";
      switch (section.type) {
        case "photoBigText":
          sectionMainType = "photo";
          break;
        case "photoCaption":
          sectionMainType = "photo";
          break;
        case "videoYoutube":
          sectionMainType = "video";
          break;
        case "videoVimeo":
          sectionMainType = "video";
          break;
        case "soundSoundcloud":
          sectionMainType = "sound";
          break;
        case "locationSinglePlace":
          sectionMainType = "location";
      }
      switch (sectionMainType) {
        case "photo":
          sectionIcon = "<i class=\"icon-camera\"></i>";
          break;
        case "video":
          sectionIcon = "<i class=\"icon-video\"></i>";
          break;
        case "sound":
          sectionIcon = "<i class=\"icon-volume-up\"></i>";
          break;
        case "location":
          sectionIcon = "<i class=\"icon-location-circled\"></i>";
      }
      deleteIcon = "<i class=\"icon-cancel-squared delete-section\"></i>";
      sectionContent = deleteIcon + sectionIcon + " ";
      if (section.title !== void 0) {
        sectionContent += section.title;
      }
      $content.append($("<li id='" + i + "'>" + sectionContent + "</li>"));
      return $("i.delete-section").on("click", function() {
        return that.deleteSection($(this).parent().attr('id'));
      });
    });
    $sortable = $content.sortable();
    return $sortable.bind('sortupdate', function() {
      var sortableSet;

      console.log("re-sort!", $(this));
      return sortableSet = true;
    });
  };

  sStoryEditor.prototype.deleteSection = function(delSection) {
    var newlist;

    console.log("Delete " + delSection);
    newlist = _.reject(this.story.story_list, function(section, k) {
      console.log("k>", k, "delSection>", delSection);
      if (k === parseFloat(delSection)) {
        return true;
      } else {
        return false;
      }
    });
    this.story.story_list = newlist;
    console.log('@story', this.story);
    this.renderSectionList();
    return this.story.render();
  };

  sStoryEditor.prototype.addSection = function(section) {
    var newSection, newSectionNum, sectionCount;

    sectionCount = d3.max(_.keys(this.story.story_list));
    console.log("count:", sectionCount);
    newSectionNum = (+sectionCount) + 1;
    newSection = {};
    $("#editor-inputs input").each(function(el) {
      if ($(this).val() !== "") {
        return newSection[$(this).attr('id').split("-")[2]] = $(this).val();
      }
    });
    newSection.type = $("#sub-section-type").val();
    this.story.story_list[newSectionNum] = newSection;
    console.log("=>", this.story);
    this.renderSectionList();
    return this.story.render();
  };

  return sStoryEditor;

})();

$(document).ready(function() {
  var story, storyEditor, story_list;

  story_list = [
    {
      photoUrl: "http://farm8.staticflickr.com/7043/6990444744_7db8937884_b.jpg",
      type: "photoBigText"
    }, {
      photoUrl: "http://farm8.staticflickr.com/7112/7136431759_889039ace4_b.jpg",
      title: "Livestreamers!",
      type: "photoBigText"
    }
  ];
  story = new sStory(story_list);
  story.render();
  storyEditor = new sStoryEditor(story);
  return d3.select("#add-section").on("click", function() {
    storyEditor.addSection();
    return $("#editor-inputs input").val(" ");
  });
});
